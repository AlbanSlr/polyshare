// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  isAdmin   Boolean    @default(false)
  files     File[]     @relation("UserFiles")
  messages  Message[]  @relation("UserMessages")
  chatRooms ChatRoom[] @relation("UserChatRooms")
  tags      Tag[]      @relation("UserTags")
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[] @relation("UserTags")
}

model ChatRoom {
  id       Int       @id @default(autoincrement())
  name     String
  files    File[]
  messages Message[]
  users    User[]    @relation("UserChatRooms")
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String   @db.VarChar(2000)
  createdAt  DateTime @default(now())
  userId     Int
  chatRoomId Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user       User     @relation("UserMessages", fields: [userId], references: [id])
}

model File {
  id         Int      @id @default(autoincrement())
  name       String
  url        String
  chatRoomId Int
  size       Int
  userId     Int
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user       User     @relation("UserFiles", fields: [userId], references: [id])
}
